plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'ec.com.softka'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
    // MapStruct (updated version)
    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.named('bootJar') {
    archiveFileName = 'app.jar'
}


tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    exclude '**/ec/com/softka/client_service/ClientServiceApplication/**/*IntegrationTest*'
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ec/com/softka/client_service/ClientServiceApplication*',
                    '**/ec/com/softka/client_service/dto/**',
                    '**/ec/com/softka/client_service/mapper/**',
                    '**/ec/com/softka/client_service/model/**',
                    '**/ec/com/softka/client_service/repository/**',
                    '**/ec/com/softka/client_service/config/**',
                    '**/ec/com/softka/client_service/exception/**',
                    '**/ec/com/softka/client_service/validation/**',
            ])
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
            excludes = [
                    'ec.com.softka.client_service.ClientServiceApplication',
                    'ec.com.softka.client_service.dto.**',
                    'ec.com.softka.client_service.mapper.**',
                    'ec.com.softka.client_service.model.**',
                    'ec.com.softka.client_service.repository.**',
                    'ec.com.softka.client_service.config.**',
                    'ec.com.softka.client_service.exception.**',
                    'ec.com.softka.client_service.validation.**',
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification