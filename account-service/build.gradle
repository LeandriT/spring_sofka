plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.8'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ec.com.sofka.account_service'
version = '0.0.1-SNAPSHOT'
description = 'account service '

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
        // âœ… Cloud 2023 compatible con Boot 3.2.x
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'io.github.resilience4j:resilience4j-spring-boot3'
    implementation 'io.github.resilience4j:resilience4j-all'
    // Spring Cloud Feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}
test {
    jvmArgs "-XX:+EnableDynamicAgentLoading"
    // opcional para depurar:
    // jvmArgs "-Djdk.instrument.traceUsage"
}
tasks.named('test') {
    useJUnitPlatform()
}


tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    exclude '**/ec/com/sofka/account_service/AccountServiceApplication*IntegrationTest*'
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ec/com/sofka/account_service/AccountServiceApplication*',
                    '**/ec/com/sofka/account_service/dto/**',
                    '**/ec/com/sofka/account_service/mapper/**',
                    '**/ec/com/sofka/account_service/model/**',
                    '**/ec/com/sofka/account_service/repository/**',
                    '**/ec/com/sofka/account_service/config/**',
                    '**/ec/com/sofka/account_service/exception/**',
                    '**/ec/com/sofka/account_service/event_handler/**',
                    '**/ec/com/sofka/account_service/client/**',
            ])
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
            excludes = [
                    'ec.com.sofka.account_service.AccountServiceApplication',
                    'ec.com.sofka.account_service.dto.**',
                    'ec.com.sofka.account_service.mapper.**',
                    'ec.com.sofka.account_service.model.**',
                    'ec.com.sofka.account_service.repository.**',
                    'ec.com.sofka.account_service.config.**',
                    'ec.com.sofka.account_service.exception.**',
                    'ec.com.sofka.account_service.client.**',
                    'ec.com.sofka.account_service.event_handler.**'
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification